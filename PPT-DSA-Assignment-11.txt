1)
public class Question01 {

	public static void main(String[] args) {
        int x = 4;

        int sqrt = mySqrt(x);

        System.out.println(sqrt); // Output: 2
    }

    public static int mySqrt(int x) {
        if (x == 0 || x == 1) {
            return x;
        }

        int left = 1;
        int right = x / 2;

        while (left <= right) {
            int mid = left + (right - left) / 2;

            if (mid == x / mid) {
                return mid;
            } else if (mid < x / mid) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }

        return right;
    }
	 
  }
  
  2)
  public class Question2 {
	 public int findPeakElement(int[] nums) {
	        int left = 0;
	        int right = nums.length - 1;
	        
	        while (left < right) {
	            int mid = left + (right - left) / 2;
	            
	            if (nums[mid] > nums[mid + 1]) {
	                right = mid;
	            } else {
	                left = mid + 1;
	            }
	        }
	        
	        return left;
	    }
	 
	 public static void main(String[] args) {
	        int[] nums = {1, 2, 3, 1};
	        
	        Question2 solution = new Question2();
	        int peakIndex = solution.findPeakElement(nums);
	        
	        System.out.println(peakIndex); // Output: 2
	    }
	 
}

3)
public class Question3 {
	 public int missingNumber(int[] nums) {
	        int n = nums.length;
	        int missing = n;
	        
	        for (int i = 0; i < n; i++) {
	            missing ^= nums[i];
	            missing ^= i;
	        }
	        
	        return missing;
	    }
	 public static void main(String[] args) {
	        int[] nums = {9,6,4,2,3,5,7,0,1};
	        
	        Question3 solution = new Question3();
	        int missingNumber = solution.missingNumber(nums);
	        
	        System.out.println(missingNumber); // Output: 2
	    }
}

4)
public class Question4 {

	public static void main(String[] args) {
        int[] nums = {1, 3, 4, 2, 2};
        
        Question4 solution = new Question4();
        int repeatedNumber = solution.findDuplicate(nums);
        
        System.out.println(repeatedNumber); // Output: 2
    }
	  public int findDuplicate(int[] nums) {
	        int slow = nums[0];
	        int fast = nums[0];
	        
	        // Find the meeting point inside the cycle
	        do {
	            slow = nums[slow];
	            fast = nums[nums[fast]];
	        } while (slow != fast);
	        
	        fast = nums[0];
	        
	        // Find the start of the cycle
	        while (slow != fast) {
	            slow = nums[slow];
	            fast = nums[fast];
	        }
	        
	        return slow;
	    }
   
}

5)
package lecture11.BinarySearch;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/*


Given two integer arrays `nums1` and `nums2`, return *an array of their intersection*. Each element in the result must be **unique** and you may return the result in **any order**.

**Example 1:**
Input: nums1 = [1,2,2,1], nums2 = [2,2]
Output: [2]
*/

public class Question5 {
	
	

	public static void main(String[] args) {
        int[] nums1 = {1, 2, 2, 1};
        int[] nums2 = {2, 2};
        
        Question5 solution = new Question5();
        int[] intersection = solution.intersection(nums1, nums2);
        
        System.out.println(Arrays.toString(intersection)); // Output: [2]
    }
	 public int[] intersection(int[] nums1, int[] nums2) {
	        Set<Integer> set = new HashSet<>();
	        
	        for (int num : nums1) {
	            set.add(num);
	        }
	        
	        List<Integer> intersection = new ArrayList<>();
	        
	        for (int num : nums2) {
	            if (set.contains(num)) {
	                intersection.add(num);
	                set.remove(num);
	            }
	        }
	        
	        int[] result = new int[intersection.size()];
	        
	        for (int i = 0; i < intersection.size(); i++) {
	            result[i] = intersection.get(i);
	        }
	        
	        return result;
	    }
}

6)
public class Question6 {
	
	 public int findMin(int[] nums) {
	        int left = 0;
	        int right = nums.length - 1;
	        
	        while (left < right) {
	            int mid = left + (right - left) / 2;
	            
	            if (nums[mid] < nums[right]) {
	                right = mid;
	            } else {
	                left = mid + 1;
	            }
	        }
	        
	        return nums[left];
	    }
	 
	 public static void main(String[] args) {
	        int[] nums = {3, 4, 5, 1, 2};
	        
	        Question6 solution = new Question6();
	        int minElement = solution.findMin(nums);
	        
	        System.out.println(minElement); // Output: 1
	    }
    
}

7)
package lecture11.BinarySearch;

import java.util.Stack;

/*
Given an array of integers `nums` sorted in non-decreasing order, find the starting and ending position of a given `target` value.

If `target` is not found in the array, return `[-1, -1]`.

You must write an algorithm with `O(log n)` runtime complexity.

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]

*/


public class Question7 {
	 public int[] searchRange(int[] nums, int target) {
	        int[] result = {-1, -1};
	        
	        // Find the leftmost occurrence
	        int left = 0;
	        int right = nums.length - 1;
	        
	        while (left <= right) {
	            int mid = left + (right - left) / 2;
	            
	            if (nums[mid] == target) {
	                result[0] = mid;
	                right = mid - 1;
	            } else if (nums[mid] > target) {
	                right = mid - 1;
	            } else {
	                left = mid + 1;
	            }
	        }
	        
	        // Find the rightmost occurrence
	        left = 0;
	        right = nums.length - 1;
	        
	        while (left <= right) {
	            int mid = left + (right - left) / 2;
	            
	            if (nums[mid] == target) {
	                result[1] = mid;
	                left = mid + 1;
	            } else if (nums[mid] > target) {
	                right = mid - 1;
	            } else {
	                left = mid + 1;
	            }
	        }
	        
	        return result;
	    }
	 public static void main(String[] args) {
	        int[] nums = {5,7,7,8,8,10};
	        int target = 8;
	        
	        Question7 solution = new Question7();
	        int[] range = solution.searchRange(nums, target);
	        
	        System.out.println("Output: [" + range[0] + ", " + range[1] + "]"); // Output: [3, 4]
	    }
}

8)
package lecture11.BinarySearch;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/*

Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must appear as many times as it shows in both arrays and you may return the result in any order.
Input: nums1 = [1,2,2,1], nums2 = [2,2]
Output: [2,2]

*/

public class Question8 {
	

	 public static void main(String[] args) {
	        int[] nums1 = {1, 2, 2, 1};
	        int[] nums2 = {2, 2};
	        
	        Question8 solution = new Question8();
	        int[] intersection = solution.intersect(nums1, nums2);
	        
	        System.out.println(Arrays.toString(intersection)); // Output: [2, 2]
	    }
	 public int[] intersect(int[] nums1, int[] nums2) {
	        Map<Integer, Integer> freqMap = new HashMap<>();
	        
	        for (int num : nums1) {
	            freqMap.put(num, freqMap.getOrDefault(num, 0) + 1);
	        }
	        
	        List<Integer> intersection = new ArrayList<>();
	        
	        for (int num : nums2) {
	            if (freqMap.containsKey(num) && freqMap.get(num) > 0) {
	                intersection.add(num);
	                freqMap.put(num, freqMap.get(num) - 1);
	            }
	        }
	        
	        int[] result = new int[intersection.size()];
	        
	        for (int i = 0; i < intersection.size(); i++) {
	            result[i] = intersection.get(i);
	        }
	        
	        return result;
	    }
   
}





